"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from . import secrets
import os
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = /Volumes/D/Z_Frond_Back_workplace/10_BA/ba_server
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%azkp1z0k0+=_&y*&95!4c@sx7feiwy#n#^+-dirbis5p0kxyw'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'djoser',
    'django_filters',
    'corsheaders',



    # self defined apps
    'store',
    # independent from all apps
    'core'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases



SSL_DIR = BASE_DIR / 'project' / 'mysql_ssl'
ca_path = SSL_DIR / 'ca.pem'
cert_path = SSL_DIR / 'client-cert.pem'
key_path = SSL_DIR / 'client-key.pem'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': secrets.DATABASE_NAME,
        'USER': secrets.DATABASE_USER,
        'PASSWORD': secrets.DATABASE_PASSWORD,
        'HOST': secrets.DATABASE_HOST,   # Set to empty string for localhost.
        'PORT': secrets.DATABASE_PORT,            # Set to empty string for default.

        'OPTIONS': {
            'ssl': {
                'ca': str(ca_path),
                'cert': str(cert_path),
                'key': str(key_path),
            }
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # By default, it requires passwords to have at least 8 characters.
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# German Time
TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

# Enable Time Zone Support
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Base directory where media files are stored
# MEDIA_ROOT = os.path.join(BASE_DIR, 'store', 'images')
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
# for url accessing the local media
MEDIA_URL = '/media/'
# define Localhost:port
LOCALHOST_PORT_URL = 'http://127.0.0.1:8000'

# the decimal format data will still be decinal, won't be string
REST_FRAMEWORK= {
    "COERCE_DECIMAL_TO_STRING": False,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

# this is the JWT header(JWT has 3 parts; header, payload, signature)

AUTH_USER_MODEL = "core.User"


DJOSER = {
    "SERIALIZERS": {
        "user_create": "core.serializers.UserCreateSerializer",
        "current_user": "core.serializers.UserSerializer"
    }
}


# change the access-token time to 1 day(https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html)
SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT', 'Bearer'),
    "ACCESS_TOKEN_LIFETIME": timedelta(days=300),
}

# CORS settings of package "django-cors-headers"

# A list of origins that are authorized to make cross-site HTTP requests
CORS_ALLOWED_ORIGINS = [
#     "https://example.com",
#     "https://sub.example.com",
#     "http://localhost:8080",
#     "http://127.0.0.1:8080",
    "http://127.0.0.1",
    "http://127.0.0.1:8000",
    "http://localhost:4200",
    "http://127.0.0.1:4200"
]

CORS_ORIGIN_WHITELIST = (
    "http://127.0.0.1",
    "http://127.0.0.1:8000",
    "http://localhost:4200",
    "http://127.0.0.1:4200"
)

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-csrf-token',
    'x-requested-with',
]

# A list of strings representing regexes that match Origins that are authorized to make cross-site HTTP requests.
# CORS_ALLOWED_ORIGIN_REGEXES = []

#
# CORS_ALLOW_ALL_ORIGINS = True


"""
celery settings:
we specify for: when running Redis inside of a docker container
'/1' means: is the name of database, it could be '/2', '/3'...
add the configuration for the Celery broker URL, configures the message broker that Celery will use for sending and receiving messages
redis://: This is the scheme of the URL, and it indicates the protocol to be used. Here, 
redis specifies that the Redis protocol should be used for communication with the message broker.
"""
CELERY_BROKER_URL = "redis://localhost:6379/1"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler"
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
    },
}